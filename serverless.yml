service: bites-ai

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 30
  apiGateway:
    request:
      payload: '200MB' # Adjust this value as needed (e.g., '5MB', '10MB')

  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: '*'
    - Effect: Allow
      Action: 
        - s3:*
      Resource: '*'
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - "arn:aws:dynamodb:us-east-1:947052173275:table/bites-user-data-dev"

functions:
  postUserData:
    memory: 512
    timeout: 10
    handler: handlers/userData.handler
    events: 
      - http: 
          path: data
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  getUserData:
    memory: 512
    timeout: 10
    handler: handlers/getUserData.handler
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  postWatchData:
    memory: 512
    timeout: 10
    handler: handlers/postWatchData.handler
    events:
      - http:
          path: watch
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  postFood:
    memory: 512
    timeout: 10
    handler: handlers/calorieCounter.handler
    events: 
      - http: 
          path: food
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  postMacros:
    memory: 512
    timeout: 30
    handler: handlers/postMacros.handler
    events: 
      - http: 
          path: macros
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  postFoodData:
    memory: 512
    timeout: 10
    handler: handlers/postFood.handler
    events: 
      - http: 
          path: foodData
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  appleWatchParse:
    memory: 1024
    timeout: 600
    runtime: python3.10
    handler: handlers/parse/apple-health-data-parser.handler
    events:
       - s3:
          bucket: bites-ai-dev
          event: s3:ObjectCreated:*
          rules:
          - suffix: .xml
  getActiveEnergy:
    memory: 1024
    timeout: 600
    runtime: python3.10
    handler: handlers/parse/getActiveEnergyBurned.handler
    layers:
      - arn:aws:lambda:us-east-1:947052173275:layer:pandas:1
    events:
       - http:
          path: activeEnergy
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.cognitoUserPoolARN}
  # postHealthProgram:
  #   timeout: 600
  #   handler: handlers/postHealthProgram.handler
  #   url: 
  #     cors: true
  

resources:
  Resources:
    BitesData:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
        TableName: bites-user-data-dev
    # PostHealthProgramLambdaFunctionUrl:
    #   Properties:
    #     InvokeMode: RESPONSE_STREAM
    

custom: 
  cognitoUserPoolARN: arn:aws:cognito-idp:us-east-1:947052173275:userpool/us-east-1_5ODQ4aPcs